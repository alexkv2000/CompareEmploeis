import java.sql.*;
import java.security.MessageDigest;
import java.security.NoSuchAlgorithmException;
import java.time.Duration;
import java.time.LocalDateTime;
import java.util.*;

public class App {

    // –î–∞–Ω–Ω—ã–µ –¥–ª—è –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
    private static final String DB_URL = "jdbc:mysql://doc-test:3306/sql-cdv";
    private static final String USER = "root";
    private static final String PASS = "G@{MsEmeXl~Gsu8~{Kcv";

    // –ù–∞–∑–≤–∞–Ω–∏—è —Ç–∞–±–ª–∏—Ü
    private static final String MAIN_TABLE = "dEmployes";
    private static final String TEMP_TABLE = "temp_table";
    private static final String DEL_MAIN_TABLE = "del_main_table"; // –î–ª—è —É–¥–∞–ª—è–µ–º—ã—Ö —Å—Ç—Ä–æ–∫
    public enum AnsiColor {
        RESET("\033[0m"),

        // –¢–µ–∫—Å—Ç–æ–≤—ã–µ —Ü–≤–µ—Ç–∞
        BLACK("\033[30m"),
        RED("\033[31m"),
        GREEN("\033[32m"),
        YELLOW("\033[33m"),
        BLUE("\033[34m"),
        PURPLE("\033[35m"),
        CYAN("\033[36m"),
        WHITE("\033[37m"),

        // –Ø—Ä–∫–∏–µ —Ü–≤–µ—Ç–∞
        BRIGHT_BLACK("\033[90m"),
        BRIGHT_RED("\033[91m"),
        BRIGHT_GREEN("\033[92m"),
        BRIGHT_YELLOW("\033[93m"),
        BRIGHT_BLUE("\033[94m"),
        BRIGHT_PURPLE("\033[95m"),
        BRIGHT_CYAN("\033[96m"),
        BRIGHT_WHITE("\033[97m"),

        // –§–æ–Ω–æ–≤—ã–µ —Ü–≤–µ—Ç–∞
        BG_BLACK("\033[40m"),
        BG_RED("\033[41m"),
        BG_GREEN("\033[42m"),
        BG_YELLOW("\033[43m"),
        BG_BLUE("\033[44m"),
        BG_PURPLE("\033[45m"),
        BG_CYAN("\033[46m"),
        BG_WHITE("\033[47m"),

        // –Ø—Ä–∫–∏–µ —Ñ–æ–Ω–æ–≤—ã–µ —Ü–≤–µ—Ç–∞
        BG_BRIGHT_BLACK("\033[100m"),
        BG_BRIGHT_RED("\033[101m"),
        BG_BRIGHT_GREEN("\033[102m"),
        BG_BRIGHT_YELLOW("\033[103m"),
        BG_BRIGHT_BLUE("\033[104m"),
        BG_BRIGHT_PURPLE("\033[105m"),
        BG_BRIGHT_CYAN("\033[106m"),
        BG_BRIGHT_WHITE("\033[107m"),

        // –°—Ç–∏–ª–∏
        BOLD("\033[1m"),
        UNDERLINE("\033[4m"),
        REVERSED("\033[7m");

        private final String code;

        AnsiColor(String code) {
            this.code = code;
        }

        @Override
        public String toString() {
            return code;
        }
    }

    // –ö–ª–∞—Å—Å –¥–ª—è –ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω–∏—è —Å—Ç—Ä–æ–∫–∏ —Ç–∞–±–ª–∏—Ü—ã
    static class Row {
        int ID;
        String EMPLOYEEID; // ID
        String LASTNAMERUS; // –§–∞–º–∏–ª–∏—è
        String NAMERUS; // –ò–º—è
        String MIDDLENAMERUS; // –û—Ç—á–µ—Å—Ç–≤–æ
        String TABNOM; // —Ç–∞–±.–Ω–æ–º–µ—Ä
        String JOBTITLERUS; // –î–æ–ª–∂–Ω–æ—Å—Ç—å
        String LOGINNAME; // –õ–æ–≥–∏–Ω
        String email; // –ø–æ—á—Ç–∞
        String IPPHONE; // –¢–µ–ª–µ—Ñ–æ–Ω
        String WORKPHONE; // –†–∞–±–æ—á–∏–π —Ç–µ–ª–µ—Ñ–æ–Ω
        String TYPE_WORK; // `–û—Å–Ω–æ–≤–Ω–æ–µ` –º–µ—Å—Ç–æ —Ä–∞–±–æ—Ç—ã
        String DEPARTMENTID; // –ü–æ–¥—Ä–∞–∑–¥–µ–ª–µ–Ω–∏–µ
        String MANAGERID; // –ú–µ–Ω–µ–¥–∂–µ—Ä ID
        String USER_SID; // SID –ö–ò–°–£
        String date_create; //

        Row(int ID, String EMPLOYEEID, String LASTNAMERUS, String NAMERUS, String MIDDLENAMERUS, String TABNOM, String JOBTITLERUS, String LOGINNAME, String email, String IPPHONE, String WORKPHONE, String TYPE_WORK, String DEPARTMENTID, String MANAGERID, String USER_SID, String date_create) {
            this.ID = ID;
            this.EMPLOYEEID = EMPLOYEEID;
            this.LASTNAMERUS = LASTNAMERUS;
            this.NAMERUS = NAMERUS;
            this.MIDDLENAMERUS = MIDDLENAMERUS;
            this.TABNOM = TABNOM;
            this.JOBTITLERUS = JOBTITLERUS;
            this.LOGINNAME = LOGINNAME;
            this.email = email;
            this.IPPHONE = IPPHONE;
            this.WORKPHONE = WORKPHONE;
            this.TYPE_WORK = TYPE_WORK;
            this.DEPARTMENTID = DEPARTMENTID;
            this.MANAGERID = MANAGERID;
            this.USER_SID = USER_SID;
            this.date_create = date_create;
        }

        // –í—ã—á–∏—Å–ª–∏—Ç—å MD5-—Ö—ç—à —É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö –ø–æ–ª–µ–π (—Ç–µ–ø–µ—Ä—å –≤–∫–ª—é—á–∞–µ—Ç date_create –¥–ª—è –ø–æ–ª–Ω–æ—Ç—ã) –£–±—Ä–∞–ª!!!
        String getMD5() throws NoSuchAlgorithmException {
            String data = EMPLOYEEID + "|" + LASTNAMERUS + "|" + NAMERUS + "|" + MIDDLENAMERUS + "|" + TABNOM + "|" + JOBTITLERUS + "|" + LOGINNAME + "|" + email + "|" + IPPHONE + "|" + WORKPHONE + "|" + TYPE_WORK + "|" + DEPARTMENTID + "|" + MANAGERID + "|" + USER_SID; // –ö–æ–Ω–∫–∞—Ç–µ–Ω–∞—Ü–∏—è —Å —Ä–∞–∑–¥–µ–ª–∏—Ç–µ–ª–µ–º
            MessageDigest md = MessageDigest.getInstance("MD5");
            byte[] hash = md.digest(data.getBytes());
            StringBuilder sb = new StringBuilder();
            for (byte b : hash) {
                sb.append(String.format("%02x", b));
            }
            return sb.toString();
        }

        @Override
        public boolean equals(Object obj) {
            if (this == obj) return true;
            if (obj == null || getClass() != obj.getClass()) return false;
            Row row = (Row) obj;
            return ID == row.ID
                    && Objects.equals(EMPLOYEEID, row.EMPLOYEEID)
                    && Objects.equals(LASTNAMERUS, row.LASTNAMERUS)
                    && Objects.equals(NAMERUS, row.NAMERUS)
                    && Objects.equals(MIDDLENAMERUS, row.MIDDLENAMERUS)
                    && Objects.equals(TABNOM, row.TABNOM)
                    && Objects.equals(JOBTITLERUS, row.JOBTITLERUS)
                    && Objects.equals(LOGINNAME, row.LOGINNAME)
                    && Objects.equals(email, row.email)
                    && Objects.equals(IPPHONE, row.IPPHONE)
                    && Objects.equals(WORKPHONE, row.WORKPHONE)
                    && Objects.equals(TYPE_WORK, row.TYPE_WORK)
                    && Objects.equals(DEPARTMENTID, row.DEPARTMENTID)
                    && Objects.equals(MANAGERID, row.MANAGERID)
                    && Objects.equals(USER_SID, row.USER_SID);
        }

        @Override
        public int hashCode() {
            return Objects.hash(ID, EMPLOYEEID, LASTNAMERUS, NAMERUS, MIDDLENAMERUS, TABNOM, JOBTITLERUS, LOGINNAME, email, IPPHONE, WORKPHONE, TYPE_WORK, DEPARTMENTID, MANAGERID, USER_SID);
        }
    }

    public static void main(String[] args) {
        LocalDateTime dStart = LocalDateTime.now();
        System.out.println("–°—Ç–∞—Ä—Ç : " + dStart);
        // –°—Ä–∞–≤–Ω–µ–Ω–∏–µ –¥–≤—É—Ö —Ç–∞–±–ª–∏—Ü.
        try (Connection conn = DriverManager.getConnection(DB_URL, USER, PASS)) {
            // –ü—Ä–æ–≤–µ—Ä–∫–∞, –ø—É—Å—Ç–∞ –ª–∏ temp_table (–ö–ò–°–£)
            try (Statement stmt = conn.createStatement();
                 ResultSet rs = stmt.executeQuery("SELECT COUNT(*) FROM " + TEMP_TABLE)) {
                if (rs.next()) {
                    int count = rs.getInt(1);
                    if (count == 0) {
                        System.out.println(AnsiColor.BG_YELLOW + "temp_table –ø—É—Å—Ç–∞—è ‚Äî –æ–±–º–µ–Ω –¥–∞–Ω–Ω—ã–º–∏ –Ω–µ –≤—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è." + AnsiColor.RESET);
                        return; // –í—ã—Ö–æ–¥ –∏–∑ main, –Ω–∏—á–µ–≥–æ –Ω–µ –º–µ–Ω—è–µ–º
                    }
                }
            }
            // –°–æ–∑–¥–∞—Ç—å DEL_MAIN_TABLE, –µ—Å–ª–∏ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
            createDelTableIfNotExists(conn);
            // –®–∞–≥ 1: –ó–∞–≥—Ä—É–∑–∏—Ç—å MD5-—Ö—ç—à–∏ –∏–∑ main_table –≤ List –¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ –ø–æ–∏—Å–∫–∞
            List<Row> mainRows = loadRows(conn, MAIN_TABLE, false); // false –¥–ª—è MAIN_TABLE (–Ω–µ –∏—Å–ø–æ–ª—å–∑—É–µ–º NOW())
            // –®–∞–≥ 2: –ó–∞–≥—Ä—É–∑–∏—Ç—å —Å—Ç—Ä–æ–∫–∏ –∏–∑ temp_table –≤ SET
            Set<String> tempHashes = loadHashes(conn);
            // –®–∞–≥ 3: –û–ø—Ä–µ–¥–µ–ª–∏—Ç—å —Å—Ç—Ä–æ–∫–∏ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è (—Å–æ–≤–ø–∞–¥–∞—é—â–∏–µ –∏–ª–∏ —Å—Ç–∞—Ä—ã–µ)
            List<Row> rowsToDelete = new ArrayList<>();
            for (Row row : mainRows) {
                String hash = row.getMD5();
                if (!tempHashes.contains(hash)) { // –°—Ç–∞—Ä—ã–µ (–Ω–µ –≤ temp)
                    rowsToDelete.add(row);
                }
            }
            // –®–∞–≥ 4: –í—ã–≥—Ä—É–∑–∏—Ç—å —É–¥–∞–ª—è–µ–º—ã–µ —Å—Ç—Ä–æ–∫–∏ –≤ del_main_table
            insertRowsToDel(conn, rowsToDelete);
            // –®–∞–≥ 5: –£–¥–∞–ª–∏—Ç—å —ç—Ç–∏ —Å—Ç—Ä–æ–∫–∏ –∏–∑ main_table
            deleteRowsFromMain(conn, rowsToDelete);
            // –®–∞–≥ 6: –ó–∞–≥—Ä—É–∑–∏—Ç—å —Å—Ç—Ä–æ–∫–∏ –∏–∑ temp_table –∏ –≤—Å—Ç–∞–≤–∏—Ç—å —Ç–æ–ª—å–∫–æ –Ω–æ–≤—ã–µ
            List<Row> tempRows = loadRows(conn, TEMP_TABLE, true); // true –¥–ª—è TEMP_TABLE (–∏—Å–ø–æ–ª—å–∑—É–µ–º NOW())
            Set<String> originalMainHashes = new HashSet<>();
            for (Row row : mainRows) {
                originalMainHashes.add(row.getMD5());
            }
            insertNewRows(conn, tempRows, originalMainHashes);
        } catch (Exception e) {
            e.printStackTrace();
        }
        LocalDateTime dStop = LocalDateTime.now();
        System.out.println("–°—Ç–æ–ø : " + dStop);

        Duration duration = Duration.between(dStart, dStop);
        long seconds = duration.getSeconds();
        //–û–ø–∏—Å–∞–Ω–∏–µ –∏—Ç–æ–≥–æ–≤
        System.out.printf(String.valueOf(AnsiColor.GREEN) + AnsiColor.BOLD +"–í—Ä–µ–º—è –≤—ã–≥—Ä—É–∑–∫–∏ %d —Å–µ–∫—É–Ω–¥.\n" + AnsiColor.RESET, seconds);
        System.out.printf(String.valueOf(AnsiColor.GREEN) + AnsiColor.BOLD + "–°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ!" + AnsiColor.RESET + AnsiColor.BLUE + " \n–£–¥–∞–ª—è–µ–º—ã–µ —Å—Ç—Ä–æ–∫–∏ –≤—ã–≥—Ä—É–∂–µ–Ω—ã –≤ `" + DEL_MAIN_TABLE.toUpperCase() + "`. –í `" + MAIN_TABLE.toUpperCase() + "` –æ—Å—Ç–∞–ª–∏—Å—å —Ç–æ–ª—å–∫–æ –Ω–æ–≤—ã–µ –∑–∞–ø–∏—Å–∏. üòÄ‚ú®\n" + AnsiColor.RESET);
        System.out.printf(AnsiColor.BLUE + "–î–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–æ–¥–∫–ª—é—á–∏—Ç–µ—Å—å –∫ –±–∞–∑–µ MySQL(%s). \n–í—ã–ø–æ–ª–Ω–∏—Ç–µ –∑–∞–ø—Ä–æ—Å—ã:\n %s", "sql_cdv", "select * FROM temp_table;     - –ø—Ä–æ–≤–µ—Ä–∫–∞ –¥–∞–Ω–Ω—ã—Ö –∏–∑ –ö–ò–°–£.\n select * FROM demployes;      - –ø—Ä–æ–≤–µ—Ä–∫–∞ –¥–∞–Ω–Ω—ã—Ö –∞–∫—Ç—É–∞–ª—å–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π.\n select * from del_main_table; - –ø—Ä–æ–≤–µ—Ä–∫–∞ —É–¥–∞–ª–µ–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö. \n" + AnsiColor.RESET);
        System.out.printf(AnsiColor.BLUE + "–î–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–æ—Å–ª–µ–¥–Ω–∏—Ö –∑–∞–≥—Ä—É–∂–µ–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö, –¥–æ–±–∞–≤–∏—Ç—å —É—Å–ª–æ–≤–∏–µ:\n %s","select * FROM demployes where " + AnsiColor.RESET + AnsiColor.BRIGHT_BLUE + AnsiColor.UNDERLINE + "date_create=(SELECT MAX(date_create)" + AnsiColor.RESET + AnsiColor.BLUE + ");                             - –∑–∞–ø–∏—Å–∏ —Å –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è.\n select * FROM demployes where " + AnsiColor.RESET + AnsiColor.BRIGHT_BLUE + AnsiColor.UNDERLINE + "CAST(date_create AS DATE)=(SELECT MAX(CAST(date_create AS DATE))" + AnsiColor.RESET + AnsiColor.BLUE + "); - –∑–∞–ø–∏—Å–∏ —Å –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –≤ —Ç–µ—á–µ–Ω–∏–∏ –¥–Ω—è.\n" + AnsiColor.RESET);

    }

    // –°–æ–∑–¥–∞—Ç—å del_main_table, –µ—Å–ª–∏ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
    private static void createDelTableIfNotExists(Connection conn) throws SQLException {
        // –°–æ–∑–¥–∞—Ç—å —Ç–∞–±–ª–∏—Ü—É –∫–∞–∫ –∫–æ–ø–∏—é —Å—Ç—Ä—É–∫—Ç—É—Ä—ã main_table
        String createSQL = "CREATE TABLE " + DEL_MAIN_TABLE + " LIKE " + MAIN_TABLE;
        // –î–æ–±–∞–≤–∏—Ç—å —Å—Ç–æ–ª–±–µ—Ü date_delete —Å —Ç–∏–ø–æ–º DATETIME –∏ –¥–µ—Ñ–æ–ª—Ç–æ–º NOW() (–∏—Å–ø—Ä–∞–≤–ª–µ–Ω–æ –¥–ª—è —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏—è NOW() –≤ insert)
        String alterSQL = "ALTER TABLE " + DEL_MAIN_TABLE + " ADD COLUMN date_delete DATETIME DEFAULT NOW()";

        try (Statement stmt = conn.createStatement()) {
            stmt.executeUpdate(createSQL);
            stmt.executeUpdate(alterSQL);
        } catch (SQLException e) {
            // –¢–∞–±–ª–∏—Ü–∞ —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç, –∏–≥–Ω–æ—Ä–∏—Ä—É–µ–º –æ—à–∏–±–∫—É
            if (!e.getSQLState().equals("42S01") && !e.getMessage().contains("already exists")) { // –ö–æ–¥ –æ—à–∏–±–∫–∏ –¥–ª—è MySQL
                throw e;
            }
        }
    }

    // –ó–∞–≥—Ä—É–∑–∏—Ç—å MD5-—Ö—ç—à–∏ –∏–∑ —Ç–∞–±–ª–∏—Ü—ã (—Ç–µ–ø–µ—Ä—å –∏—Å–ø–æ–ª—å–∑—É–µ—Ç loadRows –¥–ª—è –æ–±—ä–µ–¥–∏–Ω–µ–Ω–∏—è –ª–æ–≥–∏–∫–∏)
    private static Set<String> loadHashes(Connection conn) throws SQLException, NoSuchAlgorithmException {
        Set<String> hashes = new HashSet<>();
        List<Row> rows = loadRows(conn, App.TEMP_TABLE, false); // –û–±—ä–µ–¥–∏–Ω–µ–Ω–∏–µ: –∏—Å–ø–æ–ª—å–∑—É–µ–º loadRows –±–µ–∑ NOW()
        for (Row row : rows) {
            hashes.add(row.getMD5());
        }
        return hashes;
    }

    // –ó–∞–≥—Ä—É–∑–∏—Ç—å —Å—Ç—Ä–æ–∫–∏ –∏–∑ —Ç–∞–±–ª–∏—Ü—ã (–æ–±—ä–µ–¥–∏–Ω–µ–Ω–Ω—ã–π –º–µ—Ç–æ–¥: isTempTable=true –¥–ª—è TEMP_TABLE, —á—Ç–æ–±—ã –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å NOW() –¥–ª—è date_create)
    private static List<Row> loadRows(Connection conn, String tableName, boolean isTempTable) throws SQLException {
        List<Row> rows = new ArrayList<>();
        String query = isTempTable
                ? "SELECT ID, EMPLOYEEID, LASTNAMERUS, NAMERUS, MIDDLENAMERUS, TABNOM, JOBTITLERUS, LOGINNAME, email, IPPHONE, WORKPHONE, TYPE_WORK, DEPARTMENTID, MANAGERID, USER_SID, NOW() as date_create FROM " + tableName
                : "SELECT ID, EMPLOYEEID, LASTNAMERUS, NAMERUS, MIDDLENAMERUS, TABNOM, JOBTITLERUS, LOGINNAME, email, IPPHONE, WORKPHONE, TYPE_WORK, DEPARTMENTID, MANAGERID, USER_SID, date_create FROM " + tableName;
        try (Statement stmt = conn.createStatement(); ResultSet rs = stmt.executeQuery(query)) {
            while (rs.next()) {
                int ID = rs.getInt("ID");
                String EMPLOYEEID = rs.getString("EMPLOYEEID");
                String LASTNAMERUS = rs.getString("LASTNAMERUS");
                String NAMERUS = rs.getString("NAMERUS");
                String MIDDLENAMERUS = rs.getString("MIDDLENAMERUS");
                String TABNOM = rs.getString("TABNOM");
                String JOBTITLERUS = rs.getString("JOBTITLERUS");
                String LOGINNAME = rs.getString("LOGINNAME");
                String email = rs.getString("email");
                String IPPHONE = rs.getString("IPPHONE");
                String WORKPHONE = rs.getString("WORKPHONE");
                String TYPE_WORK = rs.getString("TYPE_WORK");
                String DEPARTMENTID = rs.getString("DEPARTMENTID");
                String MANAGERID = rs.getString("MANAGERID");
                String USER_SID = rs.getString("USER_SID");
                String date_create = rs.getString("date_create");
                rows.add(new Row(ID, EMPLOYEEID, LASTNAMERUS, NAMERUS, MIDDLENAMERUS, TABNOM, JOBTITLERUS, LOGINNAME, email, IPPHONE, WORKPHONE, TYPE_WORK, DEPARTMENTID, MANAGERID, USER_SID, date_create));
            }
        }
        return rows;
    }

    // –í—Å—Ç–∞–≤–∏—Ç—å –Ω–æ–≤—ã–µ —Å—Ç—Ä–æ–∫–∏ –≤ main_table
    private static void insertNewRows(Connection conn, List<Row> tempRows, Set<String> mainHashes) throws SQLException, NoSuchAlgorithmException {
        String insertSQL = "INSERT INTO " + MAIN_TABLE + " (EMPLOYEEID, LASTNAMERUS, NAMERUS, MIDDLENAMERUS, TABNOM, JOBTITLERUS, LOGINNAME, email, IPPHONE, WORKPHONE, TYPE_WORK, DEPARTMENTID, MANAGERID, USER_SID, date_create) VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)"; // –ù–∞—Å—Ç—Ä–æ–π—Ç–µ –¥–ª—è –∞–≤—Ç–æ-–≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ id, –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
        try (PreparedStatement pstmt = conn.prepareStatement(insertSQL)) {
            for (Row row : tempRows) {
                String hash = row.getMD5();
                if (!mainHashes.contains(hash)) {
                    pstmt.setString(1, row.EMPLOYEEID);
                    pstmt.setString(2, row.LASTNAMERUS);
                    pstmt.setString(3, row.NAMERUS);
                    pstmt.setString(4, row.MIDDLENAMERUS);
                    pstmt.setString(5, row.TABNOM);
                    pstmt.setString(6, row.JOBTITLERUS);
                    pstmt.setString(7, row.LOGINNAME);
                    pstmt.setString(8, row.email);
                    pstmt.setString(9, row.IPPHONE);
                    pstmt.setString(10, row.WORKPHONE);
                    pstmt.setString(11, row.TYPE_WORK);
                    pstmt.setString(12, row.DEPARTMENTID);
                    pstmt.setString(13, row.MANAGERID);
                    pstmt.setString(14, row.USER_SID);
                    pstmt.setString(15, row.date_create);
                    pstmt.addBatch();
                }
            }
            pstmt.executeBatch();
        }
    }

    // –í—Å—Ç–∞–≤–∏—Ç—å —Å—Ç—Ä–æ–∫–∏ –≤ del_main_table
    private static void insertRowsToDel(Connection conn, List<Row> rows) throws SQLException {
        String insertSQL = "INSERT INTO " + DEL_MAIN_TABLE + " (ID, EMPLOYEEID, LASTNAMERUS, NAMERUS, MIDDLENAMERUS, TABNOM, JOBTITLERUS, LOGINNAME, email, IPPHONE, WORKPHONE, TYPE_WORK, DEPARTMENTID, MANAGERID, USER_SID, date_create, date_delete) VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, NOW())";
        try (PreparedStatement pstmt = conn.prepareStatement(insertSQL)) {
            for (Row row : rows) {
                pstmt.setInt(1, row.ID);
                pstmt.setString(2, row.EMPLOYEEID);
                pstmt.setString(3, row.LASTNAMERUS);
                pstmt.setString(4, row.NAMERUS);
                pstmt.setString(5, row.MIDDLENAMERUS);
                pstmt.setString(6, row.TABNOM);
                pstmt.setString(7, row.JOBTITLERUS);
                pstmt.setString(8, row.LOGINNAME);
                pstmt.setString(9, row.email);
                pstmt.setString(10, row.IPPHONE);
                pstmt.setString(11, row.WORKPHONE);
                pstmt.setString(12, row.TYPE_WORK);
                pstmt.setString(13, row.DEPARTMENTID);
                pstmt.setString(14, row.MANAGERID);
                pstmt.setString(15, row.USER_SID);
                pstmt.setString(16, row.date_create);
                pstmt.addBatch();
            }
            pstmt.executeBatch();
        }
    }

    // –£–¥–∞–ª–∏—Ç—å —Å—Ç—Ä–æ–∫–∏ –∏–∑ main_table
    private static void deleteRowsFromMain(Connection conn, List<Row> rows) throws SQLException {
        String deleteSQL = "DELETE FROM " + MAIN_TABLE + " WHERE ID = ?";
        try (PreparedStatement pstmt = conn.prepareStatement(deleteSQL)) {
            for (Row row : rows) {
                pstmt.setInt(1, row.ID);
                pstmt.addBatch();
            }
            pstmt.executeBatch();
        }
    }
}
